
//jshint esversion:6
require('dotenv').config()

const express=require('express');
const mongoose=require('mongoose');
const ejs=require('ejs');
const bodyParser=require('body-parser');

const bcrypt = require('bcrypt');
const saltRounds = 10;

const app=express();
app.use(express.static("public"));
app.set("view engine",'ejs');
app.use(bodyParser.urlencoded({extended: true}));
mongoose.connect("mongodb://localhost:27017/userDB", {useNewUrlParser: true, useUnifiedTopology: true});


const userSchema=new mongoose.Schema({
  email:String,
  password:String
});

const User=new mongoose.model("User",userSchema);

app.get("/",function(req,res){
  res.render("home");
});
app.get("/register",function(req,res){
  res.render("register");
});
app.get("/login",function(req,res){
  res.render("login");
});
app.post("/register",function(req,res){
  bcrypt.hash(req.body.password, saltRounds, function(err, hash) {
    // Store hash in your password DB.
    const user1=new User({
      email:req.body.username,
      password:hash
    });
    user1.save(function(err){
      if(!err){
        res.render('secrets');
      }
      else{
        res.send(err);
      }
    });
});

});
app.post("/login",function(req,res){
const username= req.body.username;
const password=req.body.password;
User.findOne({email:username},function(err,result){
  if(err){
    console.log(err);
  }
  else{
    if(result){
      bcrypt.compare(password, result.password, function(err, result2) {
    // result == true
    if(result2===true){
      res.render("secrets");
    }
});

    }
  }
});
});


app.listen('3000',function(){
  console.log("server running at port 3000!");
})
